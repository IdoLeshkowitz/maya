// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum ExperimentStep {
  WELCOME
  CONSENT
  INSTRUCTIONS
  TASKS
  PERSONAL_DETAILS
  FINISH
}

enum Role {
  ADMIN
  USER
}

enum TaskStep {
  START
  INSTRUCTIONS
  PERFORMANCE
  OPTION_SELECTION
  GRORP_SCORING
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model ExperimentSession {
  prolificId String   @id @unique
  createdAt  DateTime @default(now())

  variantName       String
  experimentName    String
  experimentVersion String

  step         ExperimentStep?
  activeTaskId             String?
  activePersonalDetailsPage String?

  tasks       Task[]
  userDetails UserDetails?

  @@index([prolificId])
}

model Task {
  id        String            @id @default(uuid())
  SessionId String
  Session   ExperimentSession @relation(fields: [SessionId], references: [prolificId])

  startTime DateTime?
  endTime   DateTime?
  step      TaskStep

  leftOption         Json
  rightOption        Json
  overallPreviewName String

  optionSelection Json?
  leftScores      Json?
  rightScores     Json?

  @@index([SessionId])
}

model UserDetails {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  SessionId String            @unique
  Session   ExperimentSession @relation(fields: [SessionId], references: [prolificId])

  answers Json?

  @@index([SessionId])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
